/******************************************************************************
* File Name: main_cm4.c
*
* Version: 1.00
*
* Description: This code example shows how to use the TCPWM Component in
* Quadrature Decoder mode.
* This code example uses 3 TCPWM Components. One is set up as quadrature 
* decoder and two of them are configured for emulating an optical encoder where 
* the shaft is rotating. Quadrature encoded signal (same frequency and 90 degrees
* out of phase) is generated by starting one PWM Component before another.
* These signals are the input to the Quadrature Decoder.
* The Quadrature Decoder is configured to detect the direction of rotation.
*
* Related Document: CE220799.pdf
*
* Hardware Dependency: CY8CKIT-062-BLE PSoC 6 BLE Pioneer Kit
*
******************************************************************************
* Copyright (2017), Cypress Semiconductor Corporation.
******************************************************************************
* This software, including source code, documentation and related materials
* ("Software") is owned by Cypress Semiconductor Corporation (Cypress) and is
* protected by and subject to worldwide patent protection (United States and 
* foreign), United States copyright laws and international treaty provisions. 
* Cypress hereby grants to licensee a personal, non-exclusive, non-transferable
* license to copy, use, modify, create derivative works of, and compile the 
* Cypress source code and derivative works for the sole purpose of creating 
* custom software in support of licensee product, such licensee product to be
* used only in conjunction with Cypress's integrated circuit as specified in the
* applicable agreement. Any reproduction, modification, translation, compilation,
* or representation of this Software except as specified above is prohibited 
* without the express written permission of Cypress.
* 
* Disclaimer: THIS SOFTWARE IS PROVIDED AS-IS, WITH NO WARRANTY OF ANY KIND, 
* EXPRESS OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, NONINFRINGEMENT, IMPLIED 
* WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
* Cypress reserves the right to make changes to the Software without notice. 
* Cypress does not assume any liability arising out of the application or use
* of Software or any product or circuit described in the Software. Cypress does
* not authorize its products for use as critical components in any products 
* where a malfunction or failure may reasonably be expected to result in 
* significant injury or death ("ACTIVE Risk Product"). By including Cypress's 
* product in a ACTIVE Risk Product, the manufacturer of such system or application
* assumes all risk of such use and in doing so indemnifies Cypress against all
* liability. Use of this Software may be limited by and subject to the applicable
* Cypress software license agreement.
*****************************************************************************/
#include "project.h"
#include<stdio.h>

#define MID_COUNT           (0x8000u)   /* for 16 bit counter*/
#define DELAY               (10u)       /* 10 msec */
                                        /* Delay should be more than the period 
                                        of input signal to the quadrature 
                                        decoder */
typedef enum  rotation 
{
    NO_ROTATION     = 0,
    CLOCKWISE       = 1,
    ANTI_CLOCKWISE  = 2, 
} rotation_t;

/******************************************************************************
* Function Name: main()
*******************************************************************************
*
* Summary: This is the system entrance point for Cortex-M4.
* This function initializes the PSoC Components. To detect the direction of 
* rotation, quadrature decoder counter in monitored, and result is shown using 
* LED.    
*
* Parameters:
*  None
*
* Return:
*  int
*
* Side Effects:
*  None  
*
******************************************************************************/
int main(void)
{
    uint16_t count      = MID_COUNT;
    uint16_t countPrev  = MID_COUNT;
    
    /* Select direction of rotation */
    rotation_t emulated_rotation = CLOCKWISE;
    
    __enable_irq();/* Enable global interrupts. */
        
    /* Initialize with config set in component and enable QuadDec */
    Cy_TCPWM_QuadDec_Init(QuadDec_HW, QuadDec_CNT_NUM, &QuadDec_config);
    Cy_TCPWM_Enable_Multiple(QuadDec_HW, QuadDec_CNT_MASK);
    /* Start QuadDec */
    Cy_TCPWM_TriggerReloadOrIndex(QuadDec_HW, QuadDec_CNT_MASK);
    
    for(;;)
    {
        count = Cy_TCPWM_QuadDec_GetCounter(QuadDec_HW, QuadDec_CNT_NUM);
        /* For clockwise rotation count value increases and for anti-clockwise
         counter value decreases */ 
        if(count > countPrev)       /* Condition for clockwise rotation */
        {
            Cy_GPIO_Clr(Pin_Red_0_PORT, Pin_Red_0_NUM);      /* Red LED ON */
            Cy_GPIO_Set(Pin_Green_0_PORT, Pin_Green_0_NUM);  /*Green LED OFF */
            Cy_SysLib_Delay(DELAY);
        }
        else if(count < countPrev)  /* Condition for anti-clockwise rotation */
        {
            Cy_GPIO_Set(Pin_Red_0_PORT, Pin_Red_0_NUM);      /* Red LED OFF */
            Cy_GPIO_Clr(Pin_Green_0_PORT, Pin_Green_0_NUM);  /*Green LED ON */
            Cy_SysLib_Delay(DELAY);
        }
        else                        /* No rotation */
        {
            Cy_GPIO_Set(Pin_Red_0_PORT, Pin_Red_0_NUM);      /* Red LED OFF */
            Cy_GPIO_Set(Pin_Green_0_PORT, Pin_Green_0_NUM);  /*Green LED OFF */
        }
        /* Update countPrev value */
        countPrev = count;
    }
}
/* [] END OF FILE */